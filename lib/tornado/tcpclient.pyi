# Stubs for tornado_py3.tcpclient (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import datetime
import socket
import ssl
from tornado_py3.concurrent import Future
from tornado_py3.iostream import IOStream
from tornado_py3.netutil import Resolver
from typing import Any, Callable, Dict, Iterator, List, Optional, Tuple, Union

class _Connector:
    io_loop: Any = ...
    connect: Any = ...
    future: Any = ...
    timeout: Any = ...
    connect_timeout: Any = ...
    last_error: Any = ...
    remaining: Any = ...
    streams: Any = ...
    def __init__(self, addrinfo: List[Tuple], connect: Callable[[socket.AddressFamily, Tuple], Tuple[IOStream, Future[IOStream]]]) -> None: ...
    @staticmethod
    def split(addrinfo: List[Tuple]) -> Tuple[List[Tuple[socket.AddressFamily, Tuple]], List[Tuple[socket.AddressFamily, Tuple]]]: ...
    def start(self, timeout: float=..., connect_timeout: Optional[Union[float, datetime.timedelta]]=...) -> Future[Tuple[socket.AddressFamily, Any, IOStream]]: ...
    def try_connect(self, addrs: Iterator[Tuple[socket.AddressFamily, Tuple]]) -> None: ...
    def on_connect_done(self, addrs: Iterator[Tuple[socket.AddressFamily, Tuple]], af: socket.AddressFamily, addr: Tuple, future: Future[IOStream]) -> None: ...
    def set_timeout(self, timeout: float) -> None: ...
    def on_timeout(self) -> None: ...
    def clear_timeout(self) -> None: ...
    def set_connect_timeout(self, connect_timeout: Union[float, datetime.timedelta]) -> None: ...
    def on_connect_timeout(self) -> None: ...
    def clear_timeouts(self) -> None: ...
    def close_streams(self) -> None: ...

class TCPClient:
    resolver: Any = ...
    def __init__(self, resolver: Optional[Resolver]=...) -> None: ...
    def close(self) -> None: ...
    async def connect(self, host: str, port: int, af: socket.AddressFamily=..., ssl_options: Optional[Union[Dict[str, Any], ssl.SSLContext]]=..., max_buffer_size: Optional[int]=..., source_ip: Optional[str]=..., source_port: Optional[int]=..., timeout: Optional[Union[float, datetime.timedelta]]=...) -> IOStream: ...
