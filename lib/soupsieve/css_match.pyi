# Stubs for soupsieve_py3.css_match (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from . import css_types as ct
from typing import Any, Optional

RE_NOT_EMPTY: Any
RE_NOT_WS: Any
REL_PARENT: str
REL_CLOSE_PARENT: str
REL_SIBLING: str
REL_CLOSE_SIBLING: str
REL_HAS_PARENT: str
REL_HAS_CLOSE_PARENT: str
REL_HAS_SIBLING: str
REL_HAS_CLOSE_SIBLING: str
NS_XHTML: str
NS_XML: str
DIR_FLAGS: Any
RANGES: Any
DIR_MAP: Any
RE_NUM: Any
RE_TIME: Any
RE_MONTH: Any
RE_WEEK: Any
RE_DATE: Any
RE_DATETIME: Any
RE_WILD_STRIP: Any
MONTHS_30: Any
FEB: int
SHORT_MONTH: int
LONG_MONTH: int
FEB_MONTH: int
FEB_LEAP_MONTH: int
DAYS_IN_WEEK: int

class _FakeParent:
    contents: Any = ...
    def __init__(self, element: Any) -> None: ...
    def __len__(self): ...

class _DocumentNav:
    @classmethod
    def assert_valid_input(cls, tag: Any) -> None: ...
    @staticmethod
    def is_doc(obj: Any): ...
    @staticmethod
    def is_tag(obj: Any): ...
    @staticmethod
    def is_comment(obj: Any): ...
    @staticmethod
    def is_declaration(obj: Any): ...
    @staticmethod
    def is_cdata(obj: Any): ...
    @staticmethod
    def is_processing_instruction(obj: Any): ...
    @staticmethod
    def is_navigable_string(obj: Any): ...
    @staticmethod
    def is_special_string(obj: Any): ...
    @classmethod
    def is_content_string(cls, obj: Any): ...
    @staticmethod
    def create_fake_parent(el: Any): ...
    @staticmethod
    def is_xml_tree(el: Any): ...
    def is_iframe(self, el: Any): ...
    def is_root(self, el: Any): ...
    def get_contents(self, el: Any, no_iframe: bool = ...) -> None: ...
    def get_children(self, el: Any, start: Optional[Any] = ..., reverse: bool = ..., tags: bool = ..., no_iframe: bool = ...) -> None: ...
    def get_descendants(self, el: Any, tags: bool = ..., no_iframe: bool = ...) -> None: ...
    def get_parent(self, el: Any, no_iframe: bool = ...): ...
    @staticmethod
    def get_tag_name(el: Any): ...
    @staticmethod
    def get_prefix_name(el: Any): ...
    @staticmethod
    def get_uri(el: Any): ...
    @classmethod
    def get_next(cls, el: Any, tags: bool = ...): ...
    @classmethod
    def get_previous(cls, el: Any, tags: bool = ...): ...
    @staticmethod
    def has_html_ns(el: Any): ...
    @staticmethod
    def split_namespace(el: Any, attr_name: Any): ...
    @staticmethod
    def get_attribute_by_name(el: Any, name: Any, default: Optional[Any] = ...): ...
    @staticmethod
    def iter_attributes(el: Any) -> None: ...
    @classmethod
    def get_classes(cls, el: Any): ...
    def get_text(self, el: Any, no_iframe: bool = ...): ...

class Inputs:
    @staticmethod
    def validate_day(year: Any, month: Any, day: Any): ...
    @staticmethod
    def validate_week(year: Any, week: Any): ...
    @staticmethod
    def validate_month(month: Any): ...
    @staticmethod
    def validate_year(year: Any): ...
    @staticmethod
    def validate_hour(hour: Any): ...
    @staticmethod
    def validate_minutes(minutes: Any): ...
    @classmethod
    def parse_value(cls, itype: Any, value: Any): ...

class _Match:
    tag: Any = ...
    cached_meta_lang: Any = ...
    cached_default_forms: Any = ...
    cached_indeterminate_forms: Any = ...
    selectors: Any = ...
    namespaces: Any = ...
    flags: Any = ...
    iframe_restrict: bool = ...
    root: Any = ...
    scope: Any = ...
    has_html_namespace: Any = ...
    is_xml: Any = ...
    is_html: Any = ...
    def __init__(self, selectors: Any, scope: Any, namespaces: Any, flags: Any) -> None: ...
    def supports_namespaces(self): ...
    def get_tag_ns(self, el: Any): ...
    def is_html_tag(self, el: Any): ...
    def get_tag(self, el: Any): ...
    def get_prefix(self, el: Any): ...
    def find_bidi(self, el: Any): ...
    def extended_language_filter(self, lang_range: Any, lang_tag: Any): ...
    def match_attribute_name(self, el: Any, attr: Any, prefix: Any): ...
    def match_namespace(self, el: Any, tag: Any): ...
    def match_attributes(self, el: Any, attributes: Any): ...
    def match_tagname(self, el: Any, tag: Any): ...
    def match_tag(self, el: Any, tag: Any): ...
    def match_past_relations(self, el: Any, relation: Any): ...
    def match_future_child(self, parent: Any, relation: Any, recursive: bool = ...): ...
    def match_future_relations(self, el: Any, relation: Any): ...
    def match_relations(self, el: Any, relation: Any): ...
    def match_id(self, el: Any, ids: Any): ...
    def match_classes(self, el: Any, classes: Any): ...
    def match_root(self, el: Any): ...
    def match_scope(self, el: Any): ...
    def match_nth_tag_type(self, el: Any, child: Any): ...
    def match_nth(self, el: Any, nth: Any): ...
    def match_empty(self, el: Any): ...
    def match_subselectors(self, el: Any, selectors: Any): ...
    def match_contains(self, el: Any, contains: Any): ...
    def match_default(self, el: Any): ...
    def match_indeterminate(self, el: Any): ...
    def match_lang(self, el: Any, langs: Any): ...
    def match_dir(self, el: Any, directionality: Any): ...
    def match_range(self, el: Any, condition: Any): ...
    def match_defined(self, el: Any): ...
    def match_placeholder_shown(self, el: Any): ...
    def match_selectors(self, el: Any, selectors: Any): ...
    def select(self, limit: int = ...) -> None: ...
    def closest(self): ...
    def filter(self): ...
    def match(self, el: Any): ...

class CSSMatch(_DocumentNav, _Match): ...

class CommentsMatch(_DocumentNav):
    tag: Any = ...
    def __init__(self, el: Any) -> None: ...
    def get_comments(self, limit: int = ...) -> None: ...

class SoupSieve(ct.Immutable):
    __slots__: Any = ...
    def __init__(self, pattern: Any, selectors: Any, namespaces: Any, custom: Any, flags: Any) -> None: ...
    def match(self, tag: Any): ...
    def closest(self, tag: Any): ...
    def filter(self, iterable: Any): ...
    def comments(self, tag: Any, limit: int = ...): ...
    def icomments(self, tag: Any, limit: int = ...) -> None: ...
    def select_one(self, tag: Any): ...
    def select(self, tag: Any, limit: int = ...): ...
    def iselect(self, tag: Any, limit: int = ...) -> None: ...
    def __repr__(self): ...
    __str__: Any = ...
