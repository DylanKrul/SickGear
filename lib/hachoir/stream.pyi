# Stubs for stream.stream (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

class StreamError(Exception): ...

# Stubs for stream.input (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from hachoir_py3.core.log import Logger
from hachoir_py3.stream import StreamError
from typing import Any, Optional

class InputStreamError(StreamError): ...

class ReadStreamError(InputStreamError):
    size: Any = ...
    address: Any = ...
    got: Any = ...
    def __init__(self, size: Any, address: Any, got: Optional[Any] = ...) -> None: ...

class NullStreamError(InputStreamError):
    source: Any = ...
    def __init__(self, source: Any) -> None: ...

class FileFromInputStream:
    stream: Any = ...
    def __init__(self, stream: Any) -> None: ...
    def tell(self): ...
    def seek(self, pos: Any, whence: int = ...) -> None: ...
    def read(self, size: Optional[Any] = ...): ...

class InputStream(Logger):
    source: Any = ...
    tags: Any = ...
    packets: Any = ...
    def __init__(self, source: Optional[Any] = ..., size: Optional[Any] = ..., packets: Optional[Any] = ..., **args: Any) -> None: ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
    def askSize(self, client: Any): ...
    size: Any = ...
    checked: Any = ...
    def sizeGe(self, size: Any, const: bool = ...): ...
    def read(self, address: Any, size: Any) -> None: ...
    def readBits(self, address: Any, nbits: Any, endian: Any): ...
    def readInteger(self, address: Any, signed: Any, nbits: Any, endian: Any): ...
    def readBytes(self, address: Any, nb_bytes: Any): ...
    def searchBytesLength(self, needle: Any, include_needle: Any, start_address: int = ..., end_address: Optional[Any] = ...): ...
    def searchBytes(self, needle: Any, start_address: int = ..., end_address: Optional[Any] = ...): ...
    def file(self): ...

class InputPipe:
    buffer_nb_min: int = ...
    buffer_size: int = ...
    last: Any = ...
    size: Any = ...
    first: int = ...
    buffers: Any = ...
    set_size: Any = ...
    def __init__(self, input: Any, set_size: Optional[Any] = ...) -> None: ...
    current_size: Any = ...
    address: Any = ...
    def seek(self, address: Any) -> None: ...
    def read(self, size: Any): ...

class InputIOStream(InputStream):
    def __init__(self, input: Any, size: Optional[Any] = ..., **args: Any) -> None: ...
    def close(self) -> None: ...
    def read(self, address: Any, size: Any): ...
    def file(self): ...

class StringInputStream(InputStream):
    data: Any = ...
    def __init__(self, data: Any, source: str = ..., **args: Any) -> None: ...
    def close(self) -> None: ...
    def read(self, address: Any, size: Any): ...

class InputSubStream(InputStream):
    stream: Any = ...
    def __init__(self, stream: Any, offset: Any, size: Optional[Any] = ..., source: Optional[Any] = ..., **args: Any) -> None: ...
    def close(self) -> None: ...
    def read(self, address: Any, size: Any): ...

def InputFieldStream(field: Any, **args: Any): ...

class FragmentedStream(InputStream):
    stream: Any = ...
    fragments: Any = ...
    next: Any = ...
    def __init__(self, field: Any, **args: Any) -> None: ...
    def close(self) -> None: ...
    def read(self, address: Any, size: Any): ...

class ConcatStream(InputStream):
    def __init__(self, streams: Any, **args: Any) -> None: ...
    def close(self) -> None: ...
    def read(self, address: Any, size: Any): ...

# Stubs for stream.input_helper (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def FileInputStream(filename: Any, real_filename: Optional[Any] = ..., **args: Any): ...
def guessStreamCharset(stream: Any, address: Any, size: Any, default: Optional[Any] = ...): ...

# Stubs for stream.output (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from hachoir_py3.stream import StreamError
from typing import Any, Optional

MAX_READ_NBYTES: Any

class OutputStreamError(StreamError): ...

class OutputStream:
    def __init__(self, output: Any, filename: Optional[Any] = ...) -> None: ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
    filename: Any = ...
    def writeBit(self, state: Any, endian: Any) -> None: ...
    def writeBits(self, count: Any, value: Any, endian: Any) -> None: ...
    def writeInteger(self, value: Any, signed: Any, size_byte: Any, endian: Any) -> None: ...
    def copyBitsFrom(self, input: Any, address: Any, nb_bits: Any, endian: Any) -> None: ...
    def copyBytesFrom(self, input: Any, address: Any, nb_bytes: Any) -> None: ...
    def writeBytes(self, bytes: Any) -> None: ...
    def readBytes(self, address: Any, nbytes: Any): ...

def StringOutputStream(): ...
def FileOutputStream(filename: Any, real_filename: Optional[Any] = ...): ...

